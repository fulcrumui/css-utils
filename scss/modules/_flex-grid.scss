$columns: 12;
$space-between: 15px;
$sizes: (
  small,
  medium,
  large,
);

@function stripUnit($value) {
  @if type-of($value) == 'number' and not unitless($value) {
    @return $value / ($value * 0 + 1);
  }
  @return $value;
}

@mixin createColumns {
  @for $column from 1 through $columns {
    $percentage: (($column / $columns) * 100) * 1%;
    $flexBasis: calc(#{$percentage} - #{$space-between * 2});
    &-#{$column} {
      flex-basis: $flexBasis;
      max-width: $flexBasis;
      min-width: $flexBasis;
    }
  }
}

@mixin createSizeClasses {
  @each $size in $sizes {
    &--#{$size} {
      @include createColumns;
    }
  }
}

.u {
  &-flex {
    &-grid {
      *,
      *::before,
      *::after {
        box-sizing: border-box;
      }
      display: flex;
      flex: 1 0 auto;
      flex-direction: column;
      justify-content: flex-start;
      align-items: flex-start;
      width: 100%;
      overflow-x: hidden;
    }
    &-row {
      display: flex;
      flex: 1 0 auto;
      align-items: flex-start;
      justify-content: flex-start;
      flex-wrap: wrap;
      width: calc(100% + #{$space-between * 2});
      // margin: 0 -#{$space-between};
      // padding: 0 $space-between;
    }
    &-column {
      display: inline-flex;
      flex: 0 1 auto;
      margin: 0 $space-between;
      height: auto;
      &:first-of-type {
        margin-block-start: 0;
        margin-left: 0;
      }
      &:last-of-type {
        margin-block-end: 0;
        margin-right: 0;
      }
      &.m {
        @include createSizeClasses;
      }
    }
  }
}
